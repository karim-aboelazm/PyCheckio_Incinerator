type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    class Person:
        def __init__(self, first_name, last_name, birth_date, job, working_years, salary, country, city, gender='unknown'):
            raise NotImplementedError


    if __name__ == '__main__':
        #These "asserts" using only for self-checking and not necessary for auto-testing

        p1 = Person("John", "Smith", "19.09.1979", "welder", 15, 3600, "Canada", "Vancouver", "male")
        p2 = Person("Hanna Rose", "May", "05.12.1995", "designer", 2.2, 2150, "Austria", "Vienna")
        assert p1.name() == "John Smith", "Name"
        assert p1.age() == 38, "Age"
        assert p2.work() == "Is a designer", "Job"
        assert p1.money() == "648 000", "Money"
        assert p2.home() == "Lives in Vienna, Austria", "Home"
        print("Coding complete? Let's try tests!")
  learner_created: false
status: Unchecked
code: |
  class Person:
      def __init__(self, first_name, last_name, birth_date, job, working_years, salary, country, city, gender='unknown'):
          raise NotImplementedError


  if __name__ == '__main__':
      #These "asserts" using only for self-checking and not necessary for auto-testing

      p1 = Person("John", "Smith", "19.09.1979", "welder", 15, 3600, "Canada", "Vancouver", "male")
      p2 = Person("Hanna Rose", "May", "05.12.1995", "designer", 2.2, 2150, "Austria", "Vienna")
      assert p1.name() == "John Smith", "Name"
      assert p1.age() == 38, "Age"
      assert p2.work() == "Is a designer", "Job"
      assert p1.money() == "648 000", "Money"
      assert p2.home() == "Lives in Vienna, Austria", "Home"
      print("Coding complete? Let's try tests!")
seconds_from_change: 9223372036854775807
